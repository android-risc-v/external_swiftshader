/*===- TableGen'erated file -------------------------------------*- C++ -*-===*\
|*                                                                            *|
|* Assembly Writer Source Fragment                                            *|
|*                                                                            *|
|* Automatically generated file, do not edit!                                 *|
|*                                                                            *|
\*===----------------------------------------------------------------------===*/

/// printInstruction - This method is automatically generated by tablegen
/// from the instruction set description.
void RISCVInstPrinter::printInstruction(const MCInst *MI, uint64_t Address, const MCSubtargetInfo &STI, raw_ostream &O) {

#ifdef __GNUC__
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Woverlength-strings"
#endif
  static const char AsmStrs[] = {
  /* 0 */ "c.srai64\t\0"
  /* 10 */ "c.slli64\t\0"
  /* 20 */ "c.srli64\t\0"
  /* 30 */ "lla\t\0"
  /* 35 */ "sfence.vma\t\0"
  /* 47 */ "sra\t\0"
  /* 52 */ "lb\t\0"
  /* 56 */ "sb\t\0"
  /* 60 */ "c.sub\t\0"
  /* 67 */ "auipc\t\0"
  /* 74 */ "csrrc\t\0"
  /* 81 */ "fsub.d\t\0"
  /* 89 */ "fmsub.d\t\0"
  /* 98 */ "fnmsub.d\t\0"
  /* 108 */ "sc.d\t\0"
  /* 114 */ "fadd.d\t\0"
  /* 122 */ "fmadd.d\t\0"
  /* 131 */ "fnmadd.d\t\0"
  /* 141 */ "amoadd.d\t\0"
  /* 151 */ "amoand.d\t\0"
  /* 161 */ "fle.d\t\0"
  /* 168 */ "fsgnj.d\t\0"
  /* 177 */ "fcvt.l.d\t\0"
  /* 187 */ "fmul.d\t\0"
  /* 195 */ "fmin.d\t\0"
  /* 203 */ "amomin.d\t\0"
  /* 213 */ "fsgnjn.d\t\0"
  /* 223 */ "amoswap.d\t\0"
  /* 234 */ "feq.d\t\0"
  /* 241 */ "lr.d\t\0"
  /* 247 */ "amoor.d\t\0"
  /* 256 */ "amoxor.d\t\0"
  /* 266 */ "fcvt.s.d\t\0"
  /* 276 */ "fclass.d\t\0"
  /* 286 */ "flt.d\t\0"
  /* 293 */ "fsqrt.d\t\0"
  /* 302 */ "fcvt.lu.d\t\0"
  /* 313 */ "amominu.d\t\0"
  /* 324 */ "fcvt.wu.d\t\0"
  /* 335 */ "amomaxu.d\t\0"
  /* 346 */ "fdiv.d\t\0"
  /* 354 */ "fcvt.w.d\t\0"
  /* 364 */ "fmv.x.d\t\0"
  /* 373 */ "fmax.d\t\0"
  /* 381 */ "amomax.d\t\0"
  /* 391 */ "fsgnjx.d\t\0"
  /* 401 */ "c.add\t\0"
  /* 408 */ "la.tls.gd\t\0"
  /* 419 */ "c.ld\t\0"
  /* 425 */ "c.fld\t\0"
  /* 432 */ "c.and\t\0"
  /* 439 */ "c.sd\t\0"
  /* 445 */ "c.fsd\t\0"
  /* 452 */ "fence\t\0"
  /* 459 */ "bge\t\0"
  /* 464 */ "la.tls.ie\t\0"
  /* 475 */ "bne\t\0"
  /* 480 */ "mulh\t\0"
  /* 486 */ "sh\t\0"
  /* 490 */ "fence.i\t\0"
  /* 499 */ "c.srai\t\0"
  /* 507 */ "csrrci\t\0"
  /* 515 */ "c.addi\t\0"
  /* 523 */ "c.andi\t\0"
  /* 531 */ "wfi\t\0"
  /* 536 */ "c.li\t\0"
  /* 542 */ "c.slli\t\0"
  /* 550 */ "c.srli\t\0"
  /* 558 */ "xori\t\0"
  /* 564 */ "csrrsi\t\0"
  /* 572 */ "slti\t\0"
  /* 578 */ "c.lui\t\0"
  /* 585 */ "csrrwi\t\0"
  /* 593 */ "c.j\t\0"
  /* 598 */ "c.ebreak\t\0"
  /* 608 */ "fcvt.d.l\t\0"
  /* 618 */ "fcvt.s.l\t\0"
  /* 628 */ "c.jal\t\0"
  /* 635 */ "tail\t\0"
  /* 641 */ "ecall\t\0"
  /* 648 */ "sll\t\0"
  /* 653 */ "sc.d.rl\t\0"
  /* 662 */ "amoadd.d.rl\t\0"
  /* 675 */ "amoand.d.rl\t\0"
  /* 688 */ "amomin.d.rl\t\0"
  /* 701 */ "amoswap.d.rl\t\0"
  /* 715 */ "lr.d.rl\t\0"
  /* 724 */ "amoor.d.rl\t\0"
  /* 736 */ "amoxor.d.rl\t\0"
  /* 749 */ "amominu.d.rl\t\0"
  /* 763 */ "amomaxu.d.rl\t\0"
  /* 777 */ "amomax.d.rl\t\0"
  /* 790 */ "sc.w.rl\t\0"
  /* 799 */ "amoadd.w.rl\t\0"
  /* 812 */ "amoand.w.rl\t\0"
  /* 825 */ "amomin.w.rl\t\0"
  /* 838 */ "amoswap.w.rl\t\0"
  /* 852 */ "lr.w.rl\t\0"
  /* 861 */ "amoor.w.rl\t\0"
  /* 873 */ "amoxor.w.rl\t\0"
  /* 886 */ "amominu.w.rl\t\0"
  /* 900 */ "amomaxu.w.rl\t\0"
  /* 914 */ "amomax.w.rl\t\0"
  /* 927 */ "sc.d.aqrl\t\0"
  /* 938 */ "amoadd.d.aqrl\t\0"
  /* 953 */ "amoand.d.aqrl\t\0"
  /* 968 */ "amomin.d.aqrl\t\0"
  /* 983 */ "amoswap.d.aqrl\t\0"
  /* 999 */ "lr.d.aqrl\t\0"
  /* 1010 */ "amoor.d.aqrl\t\0"
  /* 1024 */ "amoxor.d.aqrl\t\0"
  /* 1039 */ "amominu.d.aqrl\t\0"
  /* 1055 */ "amomaxu.d.aqrl\t\0"
  /* 1071 */ "amomax.d.aqrl\t\0"
  /* 1086 */ "sc.w.aqrl\t\0"
  /* 1097 */ "amoadd.w.aqrl\t\0"
  /* 1112 */ "amoand.w.aqrl\t\0"
  /* 1127 */ "amomin.w.aqrl\t\0"
  /* 1142 */ "amoswap.w.aqrl\t\0"
  /* 1158 */ "lr.w.aqrl\t\0"
  /* 1169 */ "amoor.w.aqrl\t\0"
  /* 1183 */ "amoxor.w.aqrl\t\0"
  /* 1198 */ "amominu.w.aqrl\t\0"
  /* 1214 */ "amomaxu.w.aqrl\t\0"
  /* 1230 */ "amomax.w.aqrl\t\0"
  /* 1245 */ "srl\t\0"
  /* 1250 */ "mul\t\0"
  /* 1255 */ "rem\t\0"
  /* 1260 */ "c.addi4spn\t\0"
  /* 1272 */ "fence.tso\t\0"
  /* 1283 */ "c.unimp\t\0"
  /* 1292 */ "jump\t\0"
  /* 1298 */ "c.nop\t\0"
  /* 1305 */ "c.addi16sp\t\0"
  /* 1317 */ "c.ldsp\t\0"
  /* 1325 */ "c.fldsp\t\0"
  /* 1334 */ "c.sdsp\t\0"
  /* 1342 */ "c.fsdsp\t\0"
  /* 1351 */ "c.lwsp\t\0"
  /* 1359 */ "c.flwsp\t\0"
  /* 1368 */ "c.swsp\t\0"
  /* 1376 */ "c.fswsp\t\0"
  /* 1385 */ "sc.d.aq\t\0"
  /* 1394 */ "amoadd.d.aq\t\0"
  /* 1407 */ "amoand.d.aq\t\0"
  /* 1420 */ "amomin.d.aq\t\0"
  /* 1433 */ "amoswap.d.aq\t\0"
  /* 1447 */ "lr.d.aq\t\0"
  /* 1456 */ "amoor.d.aq\t\0"
  /* 1468 */ "amoxor.d.aq\t\0"
  /* 1481 */ "amominu.d.aq\t\0"
  /* 1495 */ "amomaxu.d.aq\t\0"
  /* 1509 */ "amomax.d.aq\t\0"
  /* 1522 */ "sc.w.aq\t\0"
  /* 1531 */ "amoadd.w.aq\t\0"
  /* 1544 */ "amoand.w.aq\t\0"
  /* 1557 */ "amomin.w.aq\t\0"
  /* 1570 */ "amoswap.w.aq\t\0"
  /* 1584 */ "lr.w.aq\t\0"
  /* 1593 */ "amoor.w.aq\t\0"
  /* 1605 */ "amoxor.w.aq\t\0"
  /* 1618 */ "amominu.w.aq\t\0"
  /* 1632 */ "amomaxu.w.aq\t\0"
  /* 1646 */ "amomax.w.aq\t\0"
  /* 1659 */ "beq\t\0"
  /* 1664 */ "c.jr\t\0"
  /* 1670 */ "c.jalr\t\0"
  /* 1678 */ "c.or\t\0"
  /* 1684 */ "c.xor\t\0"
  /* 1691 */ "fsub.s\t\0"
  /* 1699 */ "fmsub.s\t\0"
  /* 1708 */ "fnmsub.s\t\0"
  /* 1718 */ "fcvt.d.s\t\0"
  /* 1728 */ "fadd.s\t\0"
  /* 1736 */ "fmadd.s\t\0"
  /* 1745 */ "fnmadd.s\t\0"
  /* 1755 */ "fle.s\t\0"
  /* 1762 */ "fsgnj.s\t\0"
  /* 1771 */ "fcvt.l.s\t\0"
  /* 1781 */ "fmul.s\t\0"
  /* 1789 */ "fmin.s\t\0"
  /* 1797 */ "fsgnjn.s\t\0"
  /* 1807 */ "feq.s\t\0"
  /* 1814 */ "fclass.s\t\0"
  /* 1824 */ "flt.s\t\0"
  /* 1831 */ "fsqrt.s\t\0"
  /* 1840 */ "fcvt.lu.s\t\0"
  /* 1851 */ "fcvt.wu.s\t\0"
  /* 1862 */ "fdiv.s\t\0"
  /* 1870 */ "fcvt.w.s\t\0"
  /* 1880 */ "fmax.s\t\0"
  /* 1888 */ "fsgnjx.s\t\0"
  /* 1898 */ "csrrs\t\0"
  /* 1905 */ "mret\t\0"
  /* 1911 */ "sret\t\0"
  /* 1917 */ "uret\t\0"
  /* 1923 */ "blt\t\0"
  /* 1928 */ "slt\t\0"
  /* 1933 */ "lbu\t\0"
  /* 1938 */ "bgeu\t\0"
  /* 1944 */ "mulhu\t\0"
  /* 1951 */ "sltiu\t\0"
  /* 1958 */ "fcvt.d.lu\t\0"
  /* 1969 */ "fcvt.s.lu\t\0"
  /* 1980 */ "remu\t\0"
  /* 1986 */ "mulhsu\t\0"
  /* 1994 */ "bltu\t\0"
  /* 2000 */ "sltu\t\0"
  /* 2006 */ "divu\t\0"
  /* 2012 */ "fcvt.d.wu\t\0"
  /* 2023 */ "fcvt.s.wu\t\0"
  /* 2034 */ "lwu\t\0"
  /* 2039 */ "div\t\0"
  /* 2044 */ "c.mv\t\0"
  /* 2050 */ "sc.w\t\0"
  /* 2056 */ "fcvt.d.w\t\0"
  /* 2066 */ "amoadd.w\t\0"
  /* 2076 */ "amoand.w\t\0"
  /* 2086 */ "amomin.w\t\0"
  /* 2096 */ "amoswap.w\t\0"
  /* 2107 */ "lr.w\t\0"
  /* 2113 */ "amoor.w\t\0"
  /* 2122 */ "amoxor.w\t\0"
  /* 2132 */ "fcvt.s.w\t\0"
  /* 2142 */ "amominu.w\t\0"
  /* 2153 */ "amomaxu.w\t\0"
  /* 2164 */ "fmv.x.w\t\0"
  /* 2173 */ "amomax.w\t\0"
  /* 2183 */ "sraw\t\0"
  /* 2189 */ "c.subw\t\0"
  /* 2197 */ "c.addw\t\0"
  /* 2205 */ "sraiw\t\0"
  /* 2212 */ "c.addiw\t\0"
  /* 2221 */ "slliw\t\0"
  /* 2228 */ "srliw\t\0"
  /* 2235 */ "c.lw\t\0"
  /* 2241 */ "c.flw\t\0"
  /* 2248 */ "sllw\t\0"
  /* 2254 */ "srlw\t\0"
  /* 2260 */ "mulw\t\0"
  /* 2266 */ "remw\t\0"
  /* 2272 */ "csrrw\t\0"
  /* 2279 */ "c.sw\t\0"
  /* 2285 */ "c.fsw\t\0"
  /* 2292 */ "remuw\t\0"
  /* 2299 */ "divuw\t\0"
  /* 2306 */ "divw\t\0"
  /* 2312 */ "fmv.d.x\t\0"
  /* 2321 */ "fmv.w.x\t\0"
  /* 2330 */ "c.bnez\t\0"
  /* 2338 */ "c.beqz\t\0"
  /* 2346 */ "# XRay Function Patchable RET.\0"
  /* 2377 */ "# XRay Typed Event Log.\0"
  /* 2401 */ "# XRay Custom Event Log.\0"
  /* 2426 */ "# XRay Function Enter.\0"
  /* 2449 */ "# XRay Tail Call Exit.\0"
  /* 2472 */ "# XRay Function Exit.\0"
  /* 2494 */ "LIFETIME_END\0"
  /* 2507 */ "BUNDLE\0"
  /* 2514 */ "DBG_VALUE\0"
  /* 2524 */ "DBG_LABEL\0"
  /* 2534 */ "LIFETIME_START\0"
  /* 2549 */ "# FEntry call\0"
};
#ifdef __GNUC__
#pragma GCC diagnostic pop
#endif

  static const uint32_t OpInfo0[] = {
    0U,	// PHI
    0U,	// INLINEASM
    0U,	// INLINEASM_BR
    0U,	// CFI_INSTRUCTION
    0U,	// EH_LABEL
    0U,	// GC_LABEL
    0U,	// ANNOTATION_LABEL
    0U,	// KILL
    0U,	// EXTRACT_SUBREG
    0U,	// INSERT_SUBREG
    0U,	// IMPLICIT_DEF
    0U,	// SUBREG_TO_REG
    0U,	// COPY_TO_REGCLASS
    2515U,	// DBG_VALUE
    2525U,	// DBG_LABEL
    0U,	// REG_SEQUENCE
    0U,	// COPY
    2508U,	// BUNDLE
    2535U,	// LIFETIME_START
    2495U,	// LIFETIME_END
    0U,	// STACKMAP
    2550U,	// FENTRY_CALL
    0U,	// PATCHPOINT
    0U,	// LOAD_STACK_GUARD
    0U,	// STATEPOINT
    0U,	// LOCAL_ESCAPE
    0U,	// FAULTING_OP
    0U,	// PATCHABLE_OP
    2427U,	// PATCHABLE_FUNCTION_ENTER
    2347U,	// PATCHABLE_RET
    2473U,	// PATCHABLE_FUNCTION_EXIT
    2450U,	// PATCHABLE_TAIL_CALL
    2402U,	// PATCHABLE_EVENT_CALL
    2378U,	// PATCHABLE_TYPED_EVENT_CALL
    0U,	// ICALL_BRANCH_FUNNEL
    0U,	// G_ADD
    0U,	// G_SUB
    0U,	// G_MUL
    0U,	// G_SDIV
    0U,	// G_UDIV
    0U,	// G_SREM
    0U,	// G_UREM
    0U,	// G_AND
    0U,	// G_OR
    0U,	// G_XOR
    0U,	// G_IMPLICIT_DEF
    0U,	// G_PHI
    0U,	// G_FRAME_INDEX
    0U,	// G_GLOBAL_VALUE
    0U,	// G_EXTRACT
    0U,	// G_UNMERGE_VALUES
    0U,	// G_INSERT
    0U,	// G_MERGE_VALUES
    0U,	// G_BUILD_VECTOR
    0U,	// G_BUILD_VECTOR_TRUNC
    0U,	// G_CONCAT_VECTORS
    0U,	// G_PTRTOINT
    0U,	// G_INTTOPTR
    0U,	// G_BITCAST
    0U,	// G_INTRINSIC_TRUNC
    0U,	// G_INTRINSIC_ROUND
    0U,	// G_READCYCLECOUNTER
    0U,	// G_LOAD
    0U,	// G_SEXTLOAD
    0U,	// G_ZEXTLOAD
    0U,	// G_INDEXED_LOAD
    0U,	// G_INDEXED_SEXTLOAD
    0U,	// G_INDEXED_ZEXTLOAD
    0U,	// G_STORE
    0U,	// G_INDEXED_STORE
    0U,	// G_ATOMIC_CMPXCHG_WITH_SUCCESS
    0U,	// G_ATOMIC_CMPXCHG
    0U,	// G_ATOMICRMW_XCHG
    0U,	// G_ATOMICRMW_ADD
    0U,	// G_ATOMICRMW_SUB
    0U,	// G_ATOMICRMW_AND
    0U,	// G_ATOMICRMW_NAND
    0U,	// G_ATOMICRMW_OR
    0U,	// G_ATOMICRMW_XOR
    0U,	// G_ATOMICRMW_MAX
    0U,	// G_ATOMICRMW_MIN
    0U,	// G_ATOMICRMW_UMAX
    0U,	// G_ATOMICRMW_UMIN
    0U,	// G_ATOMICRMW_FADD
    0U,	// G_ATOMICRMW_FSUB
    0U,	// G_FENCE
    0U,	// G_BRCOND
    0U,	// G_BRINDIRECT
    0U,	// G_INTRINSIC
    0U,	// G_INTRINSIC_W_SIDE_EFFECTS
    0U,	// G_ANYEXT
    0U,	// G_TRUNC
    0U,	// G_CONSTANT
    0U,	// G_FCONSTANT
    0U,	// G_VASTART
    0U,	// G_VAARG
    0U,	// G_SEXT
    0U,	// G_SEXT_INREG
    0U,	// G_ZEXT
    0U,	// G_SHL
    0U,	// G_LSHR
    0U,	// G_ASHR
    0U,	// G_ICMP
    0U,	// G_FCMP
    0U,	// G_SELECT
    0U,	// G_UADDO
    0U,	// G_UADDE
    0U,	// G_USUBO
    0U,	// G_USUBE
    0U,	// G_SADDO
    0U,	// G_SADDE
    0U,	// G_SSUBO
    0U,	// G_SSUBE
    0U,	// G_UMULO
    0U,	// G_SMULO
    0U,	// G_UMULH
    0U,	// G_SMULH
    0U,	// G_FADD
    0U,	// G_FSUB
    0U,	// G_FMUL
    0U,	// G_FMA
    0U,	// G_FMAD
    0U,	// G_FDIV
    0U,	// G_FREM
    0U,	// G_FPOW
    0U,	// G_FEXP
    0U,	// G_FEXP2
    0U,	// G_FLOG
    0U,	// G_FLOG2
    0U,	// G_FLOG10
    0U,	// G_FNEG
    0U,	// G_FPEXT
    0U,	// G_FPTRUNC
    0U,	// G_FPTOSI
    0U,	// G_FPTOUI
    0U,	// G_SITOFP
    0U,	// G_UITOFP
    0U,	// G_FABS
    0U,	// G_FCOPYSIGN
    0U,	// G_FCANONICALIZE
    0U,	// G_FMINNUM
    0U,	// G_FMAXNUM
    0U,	// G_FMINNUM_IEEE
    0U,	// G_FMAXNUM_IEEE
    0U,	// G_FMINIMUM
    0U,	// G_FMAXIMUM
    0U,	// G_PTR_ADD
    0U,	// G_PTR_MASK
    0U,	// G_SMIN
    0U,	// G_SMAX
    0U,	// G_UMIN
    0U,	// G_UMAX
    0U,	// G_BR
    0U,	// G_BRJT
    0U,	// G_INSERT_VECTOR_ELT
    0U,	// G_EXTRACT_VECTOR_ELT
    0U,	// G_SHUFFLE_VECTOR
    0U,	// G_CTTZ
    0U,	// G_CTTZ_ZERO_UNDEF
    0U,	// G_CTLZ
    0U,	// G_CTLZ_ZERO_UNDEF
    0U,	// G_CTPOP
    0U,	// G_BSWAP
    0U,	// G_BITREVERSE
    0U,	// G_FCEIL
    0U,	// G_FCOS
    0U,	// G_FSIN
    0U,	// G_FSQRT
    0U,	// G_FFLOOR
    0U,	// G_FRINT
    0U,	// G_FNEARBYINT
    0U,	// G_ADDRSPACE_CAST
    0U,	// G_BLOCK_ADDR
    0U,	// G_JUMP_TABLE
    0U,	// G_DYN_STACKALLOC
    0U,	// G_READ_REGISTER
    0U,	// G_WRITE_REGISTER
    9U,	// ADJCALLSTACKDOWN
    9U,	// ADJCALLSTACKUP
    9U,	// BuildPairF64Pseudo
    4500U,	// PseudoAddTPRel
    9U,	// PseudoAtomicLoadNand32
    9U,	// PseudoAtomicLoadNand64
    9U,	// PseudoBR
    9U,	// PseudoBRIND
    21123U,	// PseudoCALL
    9U,	// PseudoCALLIndirect
    266883U,	// PseudoCALLReg
    9U,	// PseudoCmpXchg32
    9U,	// PseudoCmpXchg64
    1085868U,	// PseudoFLD
    1087684U,	// PseudoFLW
    1085888U,	// PseudoFSD
    1087728U,	// PseudoFSW
    75021U,	// PseudoJump
    266272U,	// PseudoLA
    266649U,	// PseudoLA_TLS_GD
    266705U,	// PseudoLA_TLS_IE
    266293U,	// PseudoLB
    268174U,	// PseudoLBU
    266662U,	// PseudoLD
    266723U,	// PseudoLH
    268187U,	// PseudoLHU
    266779U,	// PseudoLI
    266271U,	// PseudoLLA
    268478U,	// PseudoLW
    268275U,	// PseudoLWU
    9U,	// PseudoMaskedAtomicLoadAdd32
    9U,	// PseudoMaskedAtomicLoadMax32
    9U,	// PseudoMaskedAtomicLoadMin32
    9U,	// PseudoMaskedAtomicLoadNand32
    9U,	// PseudoMaskedAtomicLoadSub32
    9U,	// PseudoMaskedAtomicLoadUMax32
    9U,	// PseudoMaskedAtomicLoadUMin32
    9U,	// PseudoMaskedAtomicSwap32
    9U,	// PseudoMaskedCmpXchg32
    9U,	// PseudoRET
    1085497U,	// PseudoSB
    1085882U,	// PseudoSD
    1085927U,	// PseudoSH
    1087722U,	// PseudoSW
    21116U,	// PseudoTAIL
    9U,	// PseudoTAILIndirect
    9U,	// ReadCycleWide
    9U,	// Select_FPR32_Using_CC_GPR
    9U,	// Select_FPR64_Using_CC_GPR
    9U,	// Select_GPR_Using_CC_GPR
    9U,	// SplitF64Pseudo
    4198804U,	// ADD
    4198918U,	// ADDI
    4200615U,	// ADDIW
    4200600U,	// ADDW
    2134158U,	// AMOADD_D
    2135411U,	// AMOADD_D_AQ
    2134955U,	// AMOADD_D_AQ_RL
    2134679U,	// AMOADD_D_RL
    2136083U,	// AMOADD_W
    2135548U,	// AMOADD_W_AQ
    2135114U,	// AMOADD_W_AQ_RL
    2134816U,	// AMOADD_W_RL
    2134168U,	// AMOAND_D
    2135424U,	// AMOAND_D_AQ
    2134970U,	// AMOAND_D_AQ_RL
    2134692U,	// AMOAND_D_RL
    2136093U,	// AMOAND_W
    2135561U,	// AMOAND_W_AQ
    2135129U,	// AMOAND_W_AQ_RL
    2134829U,	// AMOAND_W_RL
    2134352U,	// AMOMAXU_D
    2135512U,	// AMOMAXU_D_AQ
    2135072U,	// AMOMAXU_D_AQ_RL
    2134780U,	// AMOMAXU_D_RL
    2136170U,	// AMOMAXU_W
    2135649U,	// AMOMAXU_W_AQ
    2135231U,	// AMOMAXU_W_AQ_RL
    2134917U,	// AMOMAXU_W_RL
    2134398U,	// AMOMAX_D
    2135526U,	// AMOMAX_D_AQ
    2135088U,	// AMOMAX_D_AQ_RL
    2134794U,	// AMOMAX_D_RL
    2136190U,	// AMOMAX_W
    2135663U,	// AMOMAX_W_AQ
    2135247U,	// AMOMAX_W_AQ_RL
    2134931U,	// AMOMAX_W_RL
    2134330U,	// AMOMINU_D
    2135498U,	// AMOMINU_D_AQ
    2135056U,	// AMOMINU_D_AQ_RL
    2134766U,	// AMOMINU_D_RL
    2136159U,	// AMOMINU_W
    2135635U,	// AMOMINU_W_AQ
    2135215U,	// AMOMINU_W_AQ_RL
    2134903U,	// AMOMINU_W_RL
    2134220U,	// AMOMIN_D
    2135437U,	// AMOMIN_D_AQ
    2134985U,	// AMOMIN_D_AQ_RL
    2134705U,	// AMOMIN_D_RL
    2136103U,	// AMOMIN_W
    2135574U,	// AMOMIN_W_AQ
    2135144U,	// AMOMIN_W_AQ_RL
    2134842U,	// AMOMIN_W_RL
    2134264U,	// AMOOR_D
    2135473U,	// AMOOR_D_AQ
    2135027U,	// AMOOR_D_AQ_RL
    2134741U,	// AMOOR_D_RL
    2136130U,	// AMOOR_W
    2135610U,	// AMOOR_W_AQ
    2135186U,	// AMOOR_W_AQ_RL
    2134878U,	// AMOOR_W_RL
    2134240U,	// AMOSWAP_D
    2135450U,	// AMOSWAP_D_AQ
    2135000U,	// AMOSWAP_D_AQ_RL
    2134718U,	// AMOSWAP_D_RL
    2136113U,	// AMOSWAP_W
    2135587U,	// AMOSWAP_W_AQ
    2135159U,	// AMOSWAP_W_AQ_RL
    2134855U,	// AMOSWAP_W_RL
    2134273U,	// AMOXOR_D
    2135485U,	// AMOXOR_D_AQ
    2135041U,	// AMOXOR_D_AQ_RL
    2134753U,	// AMOXOR_D_RL
    2136139U,	// AMOXOR_W
    2135622U,	// AMOXOR_W_AQ
    2135200U,	// AMOXOR_W_AQ_RL
    2134890U,	// AMOXOR_W_RL
    4198835U,	// AND
    4198926U,	// ANDI
    266308U,	// AUIPC
    4200060U,	// BEQ
    4198860U,	// BGE
    4200339U,	// BGEU
    4200324U,	// BLT
    4200395U,	// BLTU
    4198876U,	// BNE
    102475U,	// CSRRC
    102908U,	// CSRRCI
    104299U,	// CSRRS
    102965U,	// CSRRSI
    104673U,	// CSRRW
    102986U,	// CSRRWI
    303506U,	// C_ADD
    303620U,	// C_ADDI
    304410U,	// C_ADDI16SP
    4199661U,	// C_ADDI4SPN
    305317U,	// C_ADDIW
    303620U,	// C_ADDI_HINT_IMM_ZERO
    303620U,	// C_ADDI_HINT_X0
    303620U,	// C_ADDI_NOP
    305302U,	// C_ADDW
    303506U,	// C_ADD_HINT
    303537U,	// C_AND
    303628U,	// C_ANDI
    268579U,	// C_BEQZ
    268571U,	// C_BNEZ
    599U,	// C_EBREAK
    561578U,	// C_FLD
    562478U,	// C_FLDSP
    563394U,	// C_FLW
    562512U,	// C_FLWSP
    561598U,	// C_FSD
    562495U,	// C_FSDSP
    563438U,	// C_FSW
    562529U,	// C_FSWSP
    21074U,	// C_J
    21109U,	// C_JAL
    22151U,	// C_JALR
    22145U,	// C_JR
    561572U,	// C_LD
    562470U,	// C_LDSP
    266777U,	// C_LI
    266777U,	// C_LI_HINT
    266819U,	// C_LUI
    266819U,	// C_LUI_HINT
    563388U,	// C_LW
    562504U,	// C_LWSP
    268285U,	// C_MV
    268285U,	// C_MV_HINT
    1299U,	// C_NOP
    21779U,	// C_NOP_HINT
    304783U,	// C_OR
    561592U,	// C_SD
    562487U,	// C_SDSP
    303647U,	// C_SLLI
    24587U,	// C_SLLI64_HINT
    303647U,	// C_SLLI_HINT
    303604U,	// C_SRAI
    24577U,	// C_SRAI64_HINT
    303655U,	// C_SRLI
    24597U,	// C_SRLI64_HINT
    303165U,	// C_SUB
    305294U,	// C_SUBW
    563432U,	// C_SW
    562521U,	// C_SWSP
    1284U,	// C_UNIMP
    304789U,	// C_XOR
    4200440U,	// DIV
    4200407U,	// DIVU
    4200700U,	// DIVUW
    4200707U,	// DIVW
    601U,	// EBREAK
    642U,	// ECALL
    8392819U,	// FADD_D
    8394433U,	// FADD_S
    266517U,	// FCLASS_D
    268055U,	// FCLASS_S
    3150433U,	// FCVT_D_L
    3151783U,	// FCVT_D_LU
    267959U,	// FCVT_D_S
    268297U,	// FCVT_D_W
    268253U,	// FCVT_D_WU
    3150127U,	// FCVT_LU_D
    3151665U,	// FCVT_LU_S
    3150002U,	// FCVT_L_D
    3151596U,	// FCVT_L_S
    3150091U,	// FCVT_S_D
    3150443U,	// FCVT_S_L
    3151794U,	// FCVT_S_LU
    3151957U,	// FCVT_S_W
    3151848U,	// FCVT_S_WU
    3150149U,	// FCVT_WU_D
    3151676U,	// FCVT_WU_S
    3150179U,	// FCVT_W_D
    3151695U,	// FCVT_W_S
    8393051U,	// FDIV_D
    8394567U,	// FDIV_S
    12741U,	// FENCE
    491U,	// FENCE_I
    1273U,	// FENCE_TSO
    4198635U,	// FEQ_D
    4200208U,	// FEQ_S
    561580U,	// FLD
    4198562U,	// FLE_D
    4200156U,	// FLE_S
    4198687U,	// FLT_D
    4200225U,	// FLT_S
    563396U,	// FLW
    16781435U,	// FMADD_D
    16783049U,	// FMADD_S
    4198774U,	// FMAX_D
    4200281U,	// FMAX_S
    4198596U,	// FMIN_D
    4200190U,	// FMIN_S
    16781402U,	// FMSUB_D
    16783012U,	// FMSUB_S
    8392892U,	// FMUL_D
    8394486U,	// FMUL_S
    268553U,	// FMV_D_X
    268562U,	// FMV_W_X
    266605U,	// FMV_X_D
    268405U,	// FMV_X_W
    16781444U,	// FNMADD_D
    16783058U,	// FNMADD_S
    16781411U,	// FNMSUB_D
    16783021U,	// FNMSUB_S
    561600U,	// FSD
    4198614U,	// FSGNJN_D
    4200198U,	// FSGNJN_S
    4198792U,	// FSGNJX_D
    4200289U,	// FSGNJX_S
    4198569U,	// FSGNJ_D
    4200163U,	// FSGNJ_S
    3150118U,	// FSQRT_D
    3151656U,	// FSQRT_S
    8392786U,	// FSUB_D
    8394396U,	// FSUB_S
    563440U,	// FSW
    266871U,	// JAL
    562825U,	// JALR
    561205U,	// LB
    563086U,	// LBU
    561574U,	// LD
    561635U,	// LH
    563099U,	// LHU
    135410U,	// LR_D
    136616U,	// LR_D_AQ
    136168U,	// LR_D_AQ_RL
    135884U,	// LR_D_RL
    137276U,	// LR_W
    136753U,	// LR_W_AQ
    136327U,	// LR_W_AQ_RL
    136021U,	// LR_W_RL
    266821U,	// LUI
    563390U,	// LW
    563187U,	// LWU
    1906U,	// MRET
    4199651U,	// MUL
    4198881U,	// MULH
    4200387U,	// MULHSU
    4200345U,	// MULHU
    4200661U,	// MULW
    4200081U,	// OR
    4198960U,	// ORI
    4199656U,	// REM
    4200381U,	// REMU
    4200693U,	// REMUW
    4200667U,	// REMW
    561209U,	// SB
    2134125U,	// SC_D
    2135402U,	// SC_D_AQ
    2134944U,	// SC_D_AQ_RL
    2134670U,	// SC_D_RL
    2136067U,	// SC_W
    2135539U,	// SC_W_AQ
    2135103U,	// SC_W_AQ_RL
    2134807U,	// SC_W_RL
    561594U,	// SD
    266276U,	// SFENCE_VMA
    561639U,	// SH
    4199049U,	// SLL
    4198945U,	// SLLI
    4200622U,	// SLLIW
    4200649U,	// SLLW
    4200329U,	// SLT
    4198973U,	// SLTI
    4200352U,	// SLTIU
    4200401U,	// SLTU
    4198448U,	// SRA
    4198902U,	// SRAI
    4200606U,	// SRAIW
    4200584U,	// SRAW
    1912U,	// SRET
    4199646U,	// SRL
    4198953U,	// SRLI
    4200629U,	// SRLIW
    4200655U,	// SRLW
    4198463U,	// SUB
    4200592U,	// SUBW
    563434U,	// SW
    1286U,	// UNIMP
    1918U,	// URET
    532U,	// WFI
    4200087U,	// XOR
    4198959U,	// XORI
  };

  O << "\t";

  // Emit the opcode for the instruction.
  uint32_t Bits = 0;
  Bits |= OpInfo0[MI->getOpcode()] << 0;
  assert(Bits != 0 && "Cannot print this instruction.");
  O << AsmStrs+(Bits & 4095)-1;


  // Fragment 0 encoded into 2 bits for 4 unique commands.
  switch ((Bits >> 12) & 3) {
  default: llvm_unreachable("Invalid command number.");
  case 0:
    // DBG_VALUE, DBG_LABEL, BUNDLE, LIFETIME_START, LIFETIME_END, FENTRY_CAL...
    return;
    break;
  case 1:
    // PseudoAddTPRel, PseudoCALL, PseudoCALLReg, PseudoFLD, PseudoFLW, Pseud...
    printOperand(MI, 0, STI, O);
    break;
  case 2:
    // PseudoJump, C_ADD, C_ADDI, C_ADDI16SP, C_ADDIW, C_ADDI_HINT_IMM_ZERO, ...
    printOperand(MI, 1, STI, O);
    break;
  case 3:
    // FENCE
    printFenceArg(MI, 0, STI, O);
    O << ", ";
    printFenceArg(MI, 1, STI, O);
    return;
    break;
  }


  // Fragment 1 encoded into 1 bits for 2 unique commands.
  if ((Bits >> 14) & 1) {
    // PseudoCALL, PseudoTAIL, C_J, C_JAL, C_JALR, C_JR, C_NOP_HINT, C_SLLI64...
    return;
  } else {
    // PseudoAddTPRel, PseudoCALLReg, PseudoFLD, PseudoFLW, PseudoFSD, Pseudo...
    O << ", ";
  }


  // Fragment 2 encoded into 3 bits for 5 unique commands.
  switch ((Bits >> 15) & 7) {
  default: llvm_unreachable("Invalid command number.");
  case 0:
    // PseudoAddTPRel, PseudoCALLReg, PseudoLA, PseudoLA_TLS_GD, PseudoLA_TLS...
    printOperand(MI, 1, STI, O);
    break;
  case 1:
    // PseudoFLD, PseudoFLW, PseudoFSD, PseudoFSW, PseudoSB, PseudoSD, Pseudo...
    printOperand(MI, 2, STI, O);
    break;
  case 2:
    // PseudoJump
    printOperand(MI, 0, STI, O);
    return;
    break;
  case 3:
    // CSRRC, CSRRCI, CSRRS, CSRRSI, CSRRW, CSRRWI
    printCSRSystemRegister(MI, 1, STI, O);
    O << ", ";
    printOperand(MI, 2, STI, O);
    return;
    break;
  case 4:
    // LR_D, LR_D_AQ, LR_D_AQ_RL, LR_D_RL, LR_W, LR_W_AQ, LR_W_AQ_RL, LR_W_RL
    printAtomicMemOp(MI, 1, STI, O);
    return;
    break;
  }


  // Fragment 3 encoded into 2 bits for 3 unique commands.
  switch ((Bits >> 18) & 3) {
  default: llvm_unreachable("Invalid command number.");
  case 0:
    // PseudoAddTPRel, PseudoFLD, PseudoFLW, PseudoFSD, PseudoFSW, PseudoSB, ...
    O << ", ";
    break;
  case 1:
    // PseudoCALLReg, PseudoLA, PseudoLA_TLS_GD, PseudoLA_TLS_IE, PseudoLB, P...
    return;
    break;
  case 2:
    // C_FLD, C_FLDSP, C_FLW, C_FLWSP, C_FSD, C_FSDSP, C_FSW, C_FSWSP, C_LD, ...
    O << '(';
    printOperand(MI, 1, STI, O);
    O << ')';
    return;
    break;
  }


  // Fragment 4 encoded into 2 bits for 4 unique commands.
  switch ((Bits >> 20) & 3) {
  default: llvm_unreachable("Invalid command number.");
  case 0:
    // PseudoAddTPRel, ADD, ADDI, ADDIW, ADDW, AND, ANDI, BEQ, BGE, BGEU, BLT...
    printOperand(MI, 2, STI, O);
    break;
  case 1:
    // PseudoFLD, PseudoFLW, PseudoFSD, PseudoFSW, PseudoSB, PseudoSD, Pseudo...
    printOperand(MI, 1, STI, O);
    return;
    break;
  case 2:
    // AMOADD_D, AMOADD_D_AQ, AMOADD_D_AQ_RL, AMOADD_D_RL, AMOADD_W, AMOADD_W...
    printAtomicMemOp(MI, 1, STI, O);
    return;
    break;
  case 3:
    // FCVT_D_L, FCVT_D_LU, FCVT_LU_D, FCVT_LU_S, FCVT_L_D, FCVT_L_S, FCVT_S_...
    printFRMArg(MI, 2, STI, O);
    return;
    break;
  }


  // Fragment 5 encoded into 1 bits for 2 unique commands.
  if ((Bits >> 22) & 1) {
    // ADD, ADDI, ADDIW, ADDW, AND, ANDI, BEQ, BGE, BGEU, BLT, BLTU, BNE, C_A...
    return;
  } else {
    // PseudoAddTPRel, FADD_D, FADD_S, FDIV_D, FDIV_S, FMADD_D, FMADD_S, FMSU...
    O << ", ";
  }


  // Fragment 6 encoded into 1 bits for 2 unique commands.
  if ((Bits >> 23) & 1) {
    // FADD_D, FADD_S, FDIV_D, FDIV_S, FMUL_D, FMUL_S, FSUB_D, FSUB_S
    printFRMArg(MI, 3, STI, O);
    return;
  } else {
    // PseudoAddTPRel, FMADD_D, FMADD_S, FMSUB_D, FMSUB_S, FNMADD_D, FNMADD_S...
    printOperand(MI, 3, STI, O);
  }


  // Fragment 7 encoded into 1 bits for 2 unique commands.
  if ((Bits >> 24) & 1) {
    // FMADD_D, FMADD_S, FMSUB_D, FMSUB_S, FNMADD_D, FNMADD_S, FNMSUB_D, FNMS...
    O << ", ";
    printFRMArg(MI, 4, STI, O);
    return;
  } else {
    // PseudoAddTPRel
    return;
  }

}


/// getRegisterName - This method is automatically generated by tblgen
/// from the register set description.  This returns the assembler name
/// for the specified register.
const char *RISCVInstPrinter::
getRegisterName(unsigned RegNo, unsigned AltIdx) {
  assert(RegNo && RegNo < 97 && "Invalid register number!");


#ifdef __GNUC__
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Woverlength-strings"
#endif
  static const char AsmStrsABIRegAltName[] = {
  /* 0 */ "fs10\0"
  /* 5 */ "ft10\0"
  /* 10 */ "fa0\0"
  /* 14 */ "fs0\0"
  /* 18 */ "ft0\0"
  /* 22 */ "fs11\0"
  /* 27 */ "ft11\0"
  /* 32 */ "fa1\0"
  /* 36 */ "fs1\0"
  /* 40 */ "ft1\0"
  /* 44 */ "fa2\0"
  /* 48 */ "fs2\0"
  /* 52 */ "ft2\0"
  /* 56 */ "fa3\0"
  /* 60 */ "fs3\0"
  /* 64 */ "ft3\0"
  /* 68 */ "fa4\0"
  /* 72 */ "fs4\0"
  /* 76 */ "ft4\0"
  /* 80 */ "fa5\0"
  /* 84 */ "fs5\0"
  /* 88 */ "ft5\0"
  /* 92 */ "fa6\0"
  /* 96 */ "fs6\0"
  /* 100 */ "ft6\0"
  /* 104 */ "fa7\0"
  /* 108 */ "fs7\0"
  /* 112 */ "ft7\0"
  /* 116 */ "fs8\0"
  /* 120 */ "ft8\0"
  /* 124 */ "fs9\0"
  /* 128 */ "ft9\0"
  /* 132 */ "ra\0"
  /* 135 */ "zero\0"
  /* 140 */ "gp\0"
  /* 143 */ "sp\0"
  /* 146 */ "tp\0"
};
#ifdef __GNUC__
#pragma GCC diagnostic pop
#endif

  static const uint8_t RegAsmOffsetABIRegAltName[] = {
    135, 132, 143, 140, 146, 19, 41, 53, 15, 37, 11, 33, 45, 57, 
    69, 81, 93, 105, 49, 61, 73, 85, 97, 109, 117, 125, 1, 23, 
    65, 77, 89, 101, 18, 40, 52, 64, 76, 88, 100, 112, 14, 36, 
    10, 32, 44, 56, 68, 80, 92, 104, 48, 60, 72, 84, 96, 108, 
    116, 124, 0, 22, 120, 128, 5, 27, 18, 40, 52, 64, 76, 88, 
    100, 112, 14, 36, 10, 32, 44, 56, 68, 80, 92, 104, 48, 60, 
    72, 84, 96, 108, 116, 124, 0, 22, 120, 128, 5, 27, 
  };


#ifdef __GNUC__
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Woverlength-strings"
#endif
  static const char AsmStrsNoRegAltName[] = {
  /* 0 */ "f10\0"
  /* 4 */ "x10\0"
  /* 8 */ "f20\0"
  /* 12 */ "x20\0"
  /* 16 */ "f30\0"
  /* 20 */ "x30\0"
  /* 24 */ "f0\0"
  /* 27 */ "x0\0"
  /* 30 */ "f11\0"
  /* 34 */ "x11\0"
  /* 38 */ "f21\0"
  /* 42 */ "x21\0"
  /* 46 */ "f31\0"
  /* 50 */ "x31\0"
  /* 54 */ "f1\0"
  /* 57 */ "x1\0"
  /* 60 */ "f12\0"
  /* 64 */ "x12\0"
  /* 68 */ "f22\0"
  /* 72 */ "x22\0"
  /* 76 */ "f2\0"
  /* 79 */ "x2\0"
  /* 82 */ "f13\0"
  /* 86 */ "x13\0"
  /* 90 */ "f23\0"
  /* 94 */ "x23\0"
  /* 98 */ "f3\0"
  /* 101 */ "x3\0"
  /* 104 */ "f14\0"
  /* 108 */ "x14\0"
  /* 112 */ "f24\0"
  /* 116 */ "x24\0"
  /* 120 */ "f4\0"
  /* 123 */ "x4\0"
  /* 126 */ "f15\0"
  /* 130 */ "x15\0"
  /* 134 */ "f25\0"
  /* 138 */ "x25\0"
  /* 142 */ "f5\0"
  /* 145 */ "x5\0"
  /* 148 */ "f16\0"
  /* 152 */ "x16\0"
  /* 156 */ "f26\0"
  /* 160 */ "x26\0"
  /* 164 */ "f6\0"
  /* 167 */ "x6\0"
  /* 170 */ "f17\0"
  /* 174 */ "x17\0"
  /* 178 */ "f27\0"
  /* 182 */ "x27\0"
  /* 186 */ "f7\0"
  /* 189 */ "x7\0"
  /* 192 */ "f18\0"
  /* 196 */ "x18\0"
  /* 200 */ "f28\0"
  /* 204 */ "x28\0"
  /* 208 */ "f8\0"
  /* 211 */ "x8\0"
  /* 214 */ "f19\0"
  /* 218 */ "x19\0"
  /* 222 */ "f29\0"
  /* 226 */ "x29\0"
  /* 230 */ "f9\0"
  /* 233 */ "x9\0"
};
#ifdef __GNUC__
#pragma GCC diagnostic pop
#endif

  static const uint8_t RegAsmOffsetNoRegAltName[] = {
    27, 57, 79, 101, 123, 145, 167, 189, 211, 233, 4, 34, 64, 86, 
    108, 130, 152, 174, 196, 218, 12, 42, 72, 94, 116, 138, 160, 182, 
    204, 226, 20, 50, 24, 54, 76, 98, 120, 142, 164, 186, 208, 230, 
    0, 30, 60, 82, 104, 126, 148, 170, 192, 214, 8, 38, 68, 90, 
    112, 134, 156, 178, 200, 222, 16, 46, 24, 54, 76, 98, 120, 142, 
    164, 186, 208, 230, 0, 30, 60, 82, 104, 126, 148, 170, 192, 214, 
    8, 38, 68, 90, 112, 134, 156, 178, 200, 222, 16, 46, 
  };

  switch(AltIdx) {
  default: llvm_unreachable("Invalid register alt name index!");
  case RISCV::ABIRegAltName:
    assert(*(AsmStrsABIRegAltName+RegAsmOffsetABIRegAltName[RegNo-1]) &&
           "Invalid alt name index for register!");
    return AsmStrsABIRegAltName+RegAsmOffsetABIRegAltName[RegNo-1];
  case RISCV::NoRegAltName:
    assert(*(AsmStrsNoRegAltName+RegAsmOffsetNoRegAltName[RegNo-1]) &&
           "Invalid alt name index for register!");
    return AsmStrsNoRegAltName+RegAsmOffsetNoRegAltName[RegNo-1];
  }
}

#ifdef PRINT_ALIAS_INSTR
#undef PRINT_ALIAS_INSTR

static bool RISCVInstPrinterValidateMCOperand(const MCOperand &MCOp,
                  const MCSubtargetInfo &STI,
                  unsigned PredicateIndex);
bool RISCVInstPrinter::printAliasInstr(const MCInst *MI, const MCSubtargetInfo &STI, raw_ostream &OS) {
  static const PatternsForOpcode OpToPatterns[] = {
    {RISCV::ADDI, 0, 2 },
    {RISCV::ADDIW, 2, 1 },
    {RISCV::BEQ, 3, 1 },
    {RISCV::BGE, 4, 2 },
    {RISCV::BLT, 6, 2 },
    {RISCV::BNE, 8, 1 },
    {RISCV::CSRRC, 9, 1 },
    {RISCV::CSRRCI, 10, 1 },
    {RISCV::CSRRS, 11, 11 },
    {RISCV::CSRRSI, 22, 1 },
    {RISCV::CSRRW, 23, 7 },
    {RISCV::CSRRWI, 30, 5 },
    {RISCV::FADD_D, 35, 1 },
    {RISCV::FADD_S, 36, 1 },
    {RISCV::FCVT_D_L, 37, 1 },
    {RISCV::FCVT_D_LU, 38, 1 },
    {RISCV::FCVT_LU_D, 39, 1 },
    {RISCV::FCVT_LU_S, 40, 1 },
    {RISCV::FCVT_L_D, 41, 1 },
    {RISCV::FCVT_L_S, 42, 1 },
    {RISCV::FCVT_S_D, 43, 1 },
    {RISCV::FCVT_S_L, 44, 1 },
    {RISCV::FCVT_S_LU, 45, 1 },
    {RISCV::FCVT_S_W, 46, 1 },
    {RISCV::FCVT_S_WU, 47, 1 },
    {RISCV::FCVT_WU_D, 48, 1 },
    {RISCV::FCVT_WU_S, 49, 1 },
    {RISCV::FCVT_W_D, 50, 1 },
    {RISCV::FCVT_W_S, 51, 1 },
    {RISCV::FDIV_D, 52, 1 },
    {RISCV::FDIV_S, 53, 1 },
    {RISCV::FENCE, 54, 1 },
    {RISCV::FMADD_D, 55, 1 },
    {RISCV::FMADD_S, 56, 1 },
    {RISCV::FMSUB_D, 57, 1 },
    {RISCV::FMSUB_S, 58, 1 },
    {RISCV::FMUL_D, 59, 1 },
    {RISCV::FMUL_S, 60, 1 },
    {RISCV::FNMADD_D, 61, 1 },
    {RISCV::FNMADD_S, 62, 1 },
    {RISCV::FNMSUB_D, 63, 1 },
    {RISCV::FNMSUB_S, 64, 1 },
    {RISCV::FSGNJN_D, 65, 1 },
    {RISCV::FSGNJN_S, 66, 1 },
    {RISCV::FSGNJX_D, 67, 1 },
    {RISCV::FSGNJX_S, 68, 1 },
    {RISCV::FSGNJ_D, 69, 1 },
    {RISCV::FSGNJ_S, 70, 1 },
    {RISCV::FSQRT_D, 71, 1 },
    {RISCV::FSQRT_S, 72, 1 },
    {RISCV::FSUB_D, 73, 1 },
    {RISCV::FSUB_S, 74, 1 },
    {RISCV::JAL, 75, 2 },
    {RISCV::JALR, 77, 6 },
    {RISCV::SFENCE_VMA, 83, 2 },
    {RISCV::SLT, 85, 2 },
    {RISCV::SLTIU, 87, 1 },
    {RISCV::SLTU, 88, 1 },
    {RISCV::SUB, 89, 1 },
    {RISCV::SUBW, 90, 1 },
    {RISCV::XORI, 91, 1 },
  };

  static const AliasPattern Patterns[] = {
    // RISCV::ADDI - 0
    {0, 0, 3, 3 },
    {4, 3, 3, 3 },
    // RISCV::ADDIW - 2
    {14, 6, 3, 4 },
    // RISCV::BEQ - 3
    {28, 10, 3, 3 },
    // RISCV::BGE - 4
    {40, 13, 3, 3 },
    {52, 16, 3, 3 },
    // RISCV::BLT - 6
    {64, 19, 3, 3 },
    {76, 22, 3, 3 },
    // RISCV::BNE - 8
    {88, 25, 3, 3 },
    // RISCV::CSRRC - 9
    {100, 28, 3, 3 },
    // RISCV::CSRRCI - 10
    {114, 31, 3, 2 },
    // RISCV::CSRRS - 11
    {129, 33, 3, 4 },
    {138, 37, 3, 4 },
    {146, 41, 3, 4 },
    {157, 45, 3, 3 },
    {170, 48, 3, 3 },
    {181, 51, 3, 3 },
    {191, 54, 3, 4 },
    {205, 58, 3, 4 },
    {217, 62, 3, 4 },
    {228, 66, 3, 3 },
    {242, 69, 3, 3 },
    // RISCV::CSRRSI - 22
    {256, 72, 3, 2 },
    // RISCV::CSRRW - 23
    {271, 74, 3, 4 },
    {280, 78, 3, 4 },
    {288, 82, 3, 4 },
    {299, 86, 3, 3 },
    {313, 89, 3, 4 },
    {326, 93, 3, 4 },
    {338, 97, 3, 4 },
    // RISCV::CSRRWI - 30
    {353, 101, 3, 3 },
    {362, 104, 3, 3 },
    {374, 107, 3, 2 },
    {389, 109, 3, 3 },
    {402, 112, 3, 3 },
    // RISCV::FADD_D - 35
    {418, 115, 4, 5 },
    // RISCV::FADD_S - 36
    {436, 120, 4, 5 },
    // RISCV::FCVT_D_L - 37
    {454, 125, 3, 5 },
    // RISCV::FCVT_D_LU - 38
    {470, 130, 3, 5 },
    // RISCV::FCVT_LU_D - 39
    {487, 135, 3, 5 },
    // RISCV::FCVT_LU_S - 40
    {504, 140, 3, 5 },
    // RISCV::FCVT_L_D - 41
    {521, 145, 3, 5 },
    // RISCV::FCVT_L_S - 42
    {537, 150, 3, 5 },
    // RISCV::FCVT_S_D - 43
    {553, 155, 3, 4 },
    // RISCV::FCVT_S_L - 44
    {569, 159, 3, 5 },
    // RISCV::FCVT_S_LU - 45
    {585, 164, 3, 5 },
    // RISCV::FCVT_S_W - 46
    {602, 169, 3, 4 },
    // RISCV::FCVT_S_WU - 47
    {618, 173, 3, 4 },
    // RISCV::FCVT_WU_D - 48
    {635, 177, 3, 4 },
    // RISCV::FCVT_WU_S - 49
    {652, 181, 3, 4 },
    // RISCV::FCVT_W_D - 50
    {669, 185, 3, 4 },
    // RISCV::FCVT_W_S - 51
    {685, 189, 3, 4 },
    // RISCV::FDIV_D - 52
    {701, 193, 4, 5 },
    // RISCV::FDIV_S - 53
    {719, 198, 4, 5 },
    // RISCV::FENCE - 54
    {737, 203, 2, 2 },
    // RISCV::FMADD_D - 55
    {743, 205, 5, 6 },
    // RISCV::FMADD_S - 56
    {766, 211, 5, 6 },
    // RISCV::FMSUB_D - 57
    {789, 217, 5, 6 },
    // RISCV::FMSUB_S - 58
    {812, 223, 5, 6 },
    // RISCV::FMUL_D - 59
    {835, 229, 4, 5 },
    // RISCV::FMUL_S - 60
    {853, 234, 4, 5 },
    // RISCV::FNMADD_D - 61
    {871, 239, 5, 6 },
    // RISCV::FNMADD_S - 62
    {895, 245, 5, 6 },
    // RISCV::FNMSUB_D - 63
    {919, 251, 5, 6 },
    // RISCV::FNMSUB_S - 64
    {943, 257, 5, 6 },
    // RISCV::FSGNJN_D - 65
    {967, 263, 3, 4 },
    // RISCV::FSGNJN_S - 66
    {981, 267, 3, 4 },
    // RISCV::FSGNJX_D - 67
    {995, 271, 3, 4 },
    // RISCV::FSGNJX_S - 68
    {1009, 275, 3, 4 },
    // RISCV::FSGNJ_D - 69
    {1023, 279, 3, 4 },
    // RISCV::FSGNJ_S - 70
    {1036, 283, 3, 4 },
    // RISCV::FSQRT_D - 71
    {1049, 287, 3, 4 },
    // RISCV::FSQRT_S - 72
    {1064, 291, 3, 4 },
    // RISCV::FSUB_D - 73
    {1079, 295, 4, 5 },
    // RISCV::FSUB_S - 74
    {1097, 300, 4, 5 },
    // RISCV::JAL - 75
    {1115, 305, 2, 2 },
    {1120, 307, 2, 2 },
    // RISCV::JALR - 77
    {1127, 309, 3, 3 },
    {1131, 312, 3, 3 },
    {1137, 315, 3, 3 },
    {1145, 318, 3, 3 },
    {1157, 321, 3, 3 },
    {1167, 324, 3, 3 },
    // RISCV::SFENCE_VMA - 83
    {1179, 327, 2, 2 },
    {1190, 329, 2, 2 },
    // RISCV::SLT - 85
    {1204, 331, 3, 3 },
    {1216, 334, 3, 3 },
    // RISCV::SLTIU - 87
    {1228, 337, 3, 3 },
    // RISCV::SLTU - 88
    {1240, 340, 3, 3 },
    // RISCV::SUB - 89
    {1252, 343, 3, 3 },
    // RISCV::SUBW - 90
    {1263, 346, 3, 4 },
    // RISCV::XORI - 91
    {1275, 350, 3, 3 },
  };

  static const AliasPatternCond Conds[] = {
    // (ADDI X0, X0, 0) - 0
    {AliasPatternCond::K_Reg, RISCV::X0},
    {AliasPatternCond::K_Reg, RISCV::X0},
    {AliasPatternCond::K_Imm, uint32_t(0)},
    // (ADDI GPR:$rd, GPR:$rs, 0) - 3
    {AliasPatternCond::K_RegClass, RISCV::GPRRegClassID},
    {AliasPatternCond::K_RegClass, RISCV::GPRRegClassID},
    {AliasPatternCond::K_Imm, uint32_t(0)},
    // (ADDIW GPR:$rd, GPR:$rs, 0) - 6
    {AliasPatternCond::K_RegClass, RISCV::GPRRegClassID},
    {AliasPatternCond::K_RegClass, RISCV::GPRRegClassID},
    {AliasPatternCond::K_Imm, uint32_t(0)},
    {AliasPatternCond::K_Feature, RISCV::Feature64Bit},
    // (BEQ GPR:$rs, X0, simm13_lsb0:$offset) - 10
    {AliasPatternCond::K_RegClass, RISCV::GPRRegClassID},
    {AliasPatternCond::K_Reg, RISCV::X0},
    {AliasPatternCond::K_Custom, 1},
    // (BGE X0, GPR:$rs, simm13_lsb0:$offset) - 13
    {AliasPatternCond::K_Reg, RISCV::X0},
    {AliasPatternCond::K_RegClass, RISCV::GPRRegClassID},
    {AliasPatternCond::K_Custom, 1},
    // (BGE GPR:$rs, X0, simm13_lsb0:$offset) - 16
    {AliasPatternCond::K_RegClass, RISCV::GPRRegClassID},
    {AliasPatternCond::K_Reg, RISCV::X0},
    {AliasPatternCond::K_Custom, 1},
    // (BLT GPR:$rs, X0, simm13_lsb0:$offset) - 19
    {AliasPatternCond::K_RegClass, RISCV::GPRRegClassID},
    {AliasPatternCond::K_Reg, RISCV::X0},
    {AliasPatternCond::K_Custom, 1},
    // (BLT X0, GPR:$rs, simm13_lsb0:$offset) - 22
    {AliasPatternCond::K_Reg, RISCV::X0},
    {AliasPatternCond::K_RegClass, RISCV::GPRRegClassID},
    {AliasPatternCond::K_Custom, 1},
    // (BNE GPR:$rs, X0, simm13_lsb0:$offset) - 25
    {AliasPatternCond::K_RegClass, RISCV::GPRRegClassID},
    {AliasPatternCond::K_Reg, RISCV::X0},
    {AliasPatternCond::K_Custom, 1},
    // (CSRRC X0, csr_sysreg:$csr, GPR:$rs) - 28
    {AliasPatternCond::K_Reg, RISCV::X0},
    {AliasPatternCond::K_Ignore, 0},
    {AliasPatternCond::K_RegClass, RISCV::GPRRegClassID},
    // (CSRRCI X0, csr_sysreg:$csr, uimm5:$imm) - 31
    {AliasPatternCond::K_Reg, RISCV::X0},
    {AliasPatternCond::K_Ignore, 0},
    // (CSRRS GPR:$rd, { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1 }, X0) - 33
    {AliasPatternCond::K_RegClass, RISCV::GPRRegClassID},
    {AliasPatternCond::K_Imm, uint32_t(3)},
    {AliasPatternCond::K_Reg, RISCV::X0},
    {AliasPatternCond::K_Feature, RISCV::FeatureStdExtF},
    // (CSRRS GPR:$rd, { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0 }, X0) - 37
    {AliasPatternCond::K_RegClass, RISCV::GPRRegClassID},
    {AliasPatternCond::K_Imm, uint32_t(2)},
    {AliasPatternCond::K_Reg, RISCV::X0},
    {AliasPatternCond::K_Feature, RISCV::FeatureStdExtF},
    // (CSRRS GPR:$rd, { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1 }, X0) - 41
    {AliasPatternCond::K_RegClass, RISCV::GPRRegClassID},
    {AliasPatternCond::K_Imm, uint32_t(1)},
    {AliasPatternCond::K_Reg, RISCV::X0},
    {AliasPatternCond::K_Feature, RISCV::FeatureStdExtF},
    // (CSRRS GPR:$rd, { 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0 }, X0) - 45
    {AliasPatternCond::K_RegClass, RISCV::GPRRegClassID},
    {AliasPatternCond::K_Imm, uint32_t(3074)},
    {AliasPatternCond::K_Reg, RISCV::X0},
    // (CSRRS GPR:$rd, { 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 }, X0) - 48
    {AliasPatternCond::K_RegClass, RISCV::GPRRegClassID},
    {AliasPatternCond::K_Imm, uint32_t(3072)},
    {AliasPatternCond::K_Reg, RISCV::X0},
    // (CSRRS GPR:$rd, { 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1 }, X0) - 51
    {AliasPatternCond::K_RegClass, RISCV::GPRRegClassID},
    {AliasPatternCond::K_Imm, uint32_t(3073)},
    {AliasPatternCond::K_Reg, RISCV::X0},
    // (CSRRS GPR:$rd, { 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0 }, X0) - 54
    {AliasPatternCond::K_RegClass, RISCV::GPRRegClassID},
    {AliasPatternCond::K_Imm, uint32_t(3202)},
    {AliasPatternCond::K_Reg, RISCV::X0},
    {AliasPatternCond::K_NegFeature, RISCV::Feature64Bit},
    // (CSRRS GPR:$rd, { 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0 }, X0) - 58
    {AliasPatternCond::K_RegClass, RISCV::GPRRegClassID},
    {AliasPatternCond::K_Imm, uint32_t(3200)},
    {AliasPatternCond::K_Reg, RISCV::X0},
    {AliasPatternCond::K_NegFeature, RISCV::Feature64Bit},
    // (CSRRS GPR:$rd, { 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1 }, X0) - 62
    {AliasPatternCond::K_RegClass, RISCV::GPRRegClassID},
    {AliasPatternCond::K_Imm, uint32_t(3201)},
    {AliasPatternCond::K_Reg, RISCV::X0},
    {AliasPatternCond::K_NegFeature, RISCV::Feature64Bit},
    // (CSRRS GPR:$rd, csr_sysreg:$csr, X0) - 66
    {AliasPatternCond::K_RegClass, RISCV::GPRRegClassID},
    {AliasPatternCond::K_Ignore, 0},
    {AliasPatternCond::K_Reg, RISCV::X0},
    // (CSRRS X0, csr_sysreg:$csr, GPR:$rs) - 69
    {AliasPatternCond::K_Reg, RISCV::X0},
    {AliasPatternCond::K_Ignore, 0},
    {AliasPatternCond::K_RegClass, RISCV::GPRRegClassID},
    // (CSRRSI X0, csr_sysreg:$csr, uimm5:$imm) - 72
    {AliasPatternCond::K_Reg, RISCV::X0},
    {AliasPatternCond::K_Ignore, 0},
    // (CSRRW X0, { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1 }, GPR:$rs) - 74
    {AliasPatternCond::K_Reg, RISCV::X0},
    {AliasPatternCond::K_Imm, uint32_t(3)},
    {AliasPatternCond::K_RegClass, RISCV::GPRRegClassID},
    {AliasPatternCond::K_Feature, RISCV::FeatureStdExtF},
    // (CSRRW X0, { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0 }, GPR:$rs) - 78
    {AliasPatternCond::K_Reg, RISCV::X0},
    {AliasPatternCond::K_Imm, uint32_t(2)},
    {AliasPatternCond::K_RegClass, RISCV::GPRRegClassID},
    {AliasPatternCond::K_Feature, RISCV::FeatureStdExtF},
    // (CSRRW X0, { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1 }, GPR:$rs) - 82
    {AliasPatternCond::K_Reg, RISCV::X0},
    {AliasPatternCond::K_Imm, uint32_t(1)},
    {AliasPatternCond::K_RegClass, RISCV::GPRRegClassID},
    {AliasPatternCond::K_Feature, RISCV::FeatureStdExtF},
    // (CSRRW X0, csr_sysreg:$csr, GPR:$rs) - 86
    {AliasPatternCond::K_Reg, RISCV::X0},
    {AliasPatternCond::K_Ignore, 0},
    {AliasPatternCond::K_RegClass, RISCV::GPRRegClassID},
    // (CSRRW GPR:$rd, { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1 }, GPR:$rs) - 89
    {AliasPatternCond::K_RegClass, RISCV::GPRRegClassID},
    {AliasPatternCond::K_Imm, uint32_t(3)},
    {AliasPatternCond::K_RegClass, RISCV::GPRRegClassID},
    {AliasPatternCond::K_Feature, RISCV::FeatureStdExtF},
    // (CSRRW GPR:$rd, { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0 }, GPR:$rs) - 93
    {AliasPatternCond::K_RegClass, RISCV::GPRRegClassID},
    {AliasPatternCond::K_Imm, uint32_t(2)},
    {AliasPatternCond::K_RegClass, RISCV::GPRRegClassID},
    {AliasPatternCond::K_Feature, RISCV::FeatureStdExtF},
    // (CSRRW GPR:$rd, { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1 }, GPR:$rs) - 97
    {AliasPatternCond::K_RegClass, RISCV::GPRRegClassID},
    {AliasPatternCond::K_Imm, uint32_t(1)},
    {AliasPatternCond::K_RegClass, RISCV::GPRRegClassID},
    {AliasPatternCond::K_Feature, RISCV::FeatureStdExtF},
    // (CSRRWI X0, { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0 }, uimm5:$imm) - 101
    {AliasPatternCond::K_Reg, RISCV::X0},
    {AliasPatternCond::K_Imm, uint32_t(2)},
    {AliasPatternCond::K_Feature, RISCV::FeatureStdExtF},
    // (CSRRWI X0, { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1 }, uimm5:$imm) - 104
    {AliasPatternCond::K_Reg, RISCV::X0},
    {AliasPatternCond::K_Imm, uint32_t(1)},
    {AliasPatternCond::K_Feature, RISCV::FeatureStdExtF},
    // (CSRRWI X0, csr_sysreg:$csr, uimm5:$imm) - 107
    {AliasPatternCond::K_Reg, RISCV::X0},
    {AliasPatternCond::K_Ignore, 0},
    // (CSRRWI GPR:$rd, { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0 }, uimm5:$imm) - 109
    {AliasPatternCond::K_RegClass, RISCV::GPRRegClassID},
    {AliasPatternCond::K_Imm, uint32_t(2)},
    {AliasPatternCond::K_Feature, RISCV::FeatureStdExtF},
    // (CSRRWI GPR:$rd, { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1 }, uimm5:$imm) - 112
    {AliasPatternCond::K_RegClass, RISCV::GPRRegClassID},
    {AliasPatternCond::K_Imm, uint32_t(1)},
    {AliasPatternCond::K_Feature, RISCV::FeatureStdExtF},
    // (FADD_D FPR64:$rd, FPR64:$rs1, FPR64:$rs2, { 1, 1, 1 }) - 115
    {AliasPatternCond::K_RegClass, RISCV::FPR64RegClassID},
    {AliasPatternCond::K_RegClass, RISCV::FPR64RegClassID},
    {AliasPatternCond::K_RegClass, RISCV::FPR64RegClassID},
    {AliasPatternCond::K_Imm, uint32_t(7)},
    {AliasPatternCond::K_Feature, RISCV::FeatureStdExtD},
    // (FADD_S FPR32:$rd, FPR32:$rs1, FPR32:$rs2, { 1, 1, 1 }) - 120
    {AliasPatternCond::K_RegClass, RISCV::FPR32RegClassID},
    {AliasPatternCond::K_RegClass, RISCV::FPR32RegClassID},
    {AliasPatternCond::K_RegClass, RISCV::FPR32RegClassID},
    {AliasPatternCond::K_Imm, uint32_t(7)},
    {AliasPatternCond::K_Feature, RISCV::FeatureStdExtF},
    // (FCVT_D_L FPR64:$rd, GPR:$rs1, { 1, 1, 1 }) - 125
    {AliasPatternCond::K_RegClass, RISCV::FPR64RegClassID},
    {AliasPatternCond::K_RegClass, RISCV::GPRRegClassID},
    {AliasPatternCond::K_Imm, uint32_t(7)},
    {AliasPatternCond::K_Feature, RISCV::FeatureStdExtD},
    {AliasPatternCond::K_Feature, RISCV::Feature64Bit},
    // (FCVT_D_LU FPR64:$rd, GPR:$rs1, { 1, 1, 1 }) - 130
    {AliasPatternCond::K_RegClass, RISCV::FPR64RegClassID},
    {AliasPatternCond::K_RegClass, RISCV::GPRRegClassID},
    {AliasPatternCond::K_Imm, uint32_t(7)},
    {AliasPatternCond::K_Feature, RISCV::FeatureStdExtD},
    {AliasPatternCond::K_Feature, RISCV::Feature64Bit},
    // (FCVT_LU_D GPR:$rd, FPR64:$rs1, { 1, 1, 1 }) - 135
    {AliasPatternCond::K_RegClass, RISCV::GPRRegClassID},
    {AliasPatternCond::K_RegClass, RISCV::FPR64RegClassID},
    {AliasPatternCond::K_Imm, uint32_t(7)},
    {AliasPatternCond::K_Feature, RISCV::FeatureStdExtD},
    {AliasPatternCond::K_Feature, RISCV::Feature64Bit},
    // (FCVT_LU_S GPR:$rd, FPR32:$rs1, { 1, 1, 1 }) - 140
    {AliasPatternCond::K_RegClass, RISCV::GPRRegClassID},
    {AliasPatternCond::K_RegClass, RISCV::FPR32RegClassID},
    {AliasPatternCond::K_Imm, uint32_t(7)},
    {AliasPatternCond::K_Feature, RISCV::FeatureStdExtF},
    {AliasPatternCond::K_Feature, RISCV::Feature64Bit},
    // (FCVT_L_D GPR:$rd, FPR64:$rs1, { 1, 1, 1 }) - 145
    {AliasPatternCond::K_RegClass, RISCV::GPRRegClassID},
    {AliasPatternCond::K_RegClass, RISCV::FPR64RegClassID},
    {AliasPatternCond::K_Imm, uint32_t(7)},
    {AliasPatternCond::K_Feature, RISCV::FeatureStdExtD},
    {AliasPatternCond::K_Feature, RISCV::Feature64Bit},
    // (FCVT_L_S GPR:$rd, FPR32:$rs1, { 1, 1, 1 }) - 150
    {AliasPatternCond::K_RegClass, RISCV::GPRRegClassID},
    {AliasPatternCond::K_RegClass, RISCV::FPR32RegClassID},
    {AliasPatternCond::K_Imm, uint32_t(7)},
    {AliasPatternCond::K_Feature, RISCV::FeatureStdExtF},
    {AliasPatternCond::K_Feature, RISCV::Feature64Bit},
    // (FCVT_S_D FPR32:$rd, FPR64:$rs1, { 1, 1, 1 }) - 155
    {AliasPatternCond::K_RegClass, RISCV::FPR32RegClassID},
    {AliasPatternCond::K_RegClass, RISCV::FPR64RegClassID},
    {AliasPatternCond::K_Imm, uint32_t(7)},
    {AliasPatternCond::K_Feature, RISCV::FeatureStdExtD},
    // (FCVT_S_L FPR32:$rd, GPR:$rs1, { 1, 1, 1 }) - 159
    {AliasPatternCond::K_RegClass, RISCV::FPR32RegClassID},
    {AliasPatternCond::K_RegClass, RISCV::GPRRegClassID},
    {AliasPatternCond::K_Imm, uint32_t(7)},
    {AliasPatternCond::K_Feature, RISCV::FeatureStdExtF},
    {AliasPatternCond::K_Feature, RISCV::Feature64Bit},
    // (FCVT_S_LU FPR32:$rd, GPR:$rs1, { 1, 1, 1 }) - 164
    {AliasPatternCond::K_RegClass, RISCV::FPR32RegClassID},
    {AliasPatternCond::K_RegClass, RISCV::GPRRegClassID},
    {AliasPatternCond::K_Imm, uint32_t(7)},
    {AliasPatternCond::K_Feature, RISCV::FeatureStdExtF},
    {AliasPatternCond::K_Feature, RISCV::Feature64Bit},
    // (FCVT_S_W FPR32:$rd, GPR:$rs1, { 1, 1, 1 }) - 169
    {AliasPatternCond::K_RegClass, RISCV::FPR32RegClassID},
    {AliasPatternCond::K_RegClass, RISCV::GPRRegClassID},
    {AliasPatternCond::K_Imm, uint32_t(7)},
    {AliasPatternCond::K_Feature, RISCV::FeatureStdExtF},
    // (FCVT_S_WU FPR32:$rd, GPR:$rs1, { 1, 1, 1 }) - 173
    {AliasPatternCond::K_RegClass, RISCV::FPR32RegClassID},
    {AliasPatternCond::K_RegClass, RISCV::GPRRegClassID},
    {AliasPatternCond::K_Imm, uint32_t(7)},
    {AliasPatternCond::K_Feature, RISCV::FeatureStdExtF},
    // (FCVT_WU_D GPR:$rd, FPR64:$rs1, { 1, 1, 1 }) - 177
    {AliasPatternCond::K_RegClass, RISCV::GPRRegClassID},
    {AliasPatternCond::K_RegClass, RISCV::FPR64RegClassID},
    {AliasPatternCond::K_Imm, uint32_t(7)},
    {AliasPatternCond::K_Feature, RISCV::FeatureStdExtD},
    // (FCVT_WU_S GPR:$rd, FPR32:$rs1, { 1, 1, 1 }) - 181
    {AliasPatternCond::K_RegClass, RISCV::GPRRegClassID},
    {AliasPatternCond::K_RegClass, RISCV::FPR32RegClassID},
    {AliasPatternCond::K_Imm, uint32_t(7)},
    {AliasPatternCond::K_Feature, RISCV::FeatureStdExtF},
    // (FCVT_W_D GPR:$rd, FPR64:$rs1, { 1, 1, 1 }) - 185
    {AliasPatternCond::K_RegClass, RISCV::GPRRegClassID},
    {AliasPatternCond::K_RegClass, RISCV::FPR64RegClassID},
    {AliasPatternCond::K_Imm, uint32_t(7)},
    {AliasPatternCond::K_Feature, RISCV::FeatureStdExtD},
    // (FCVT_W_S GPR:$rd, FPR32:$rs1, { 1, 1, 1 }) - 189
    {AliasPatternCond::K_RegClass, RISCV::GPRRegClassID},
    {AliasPatternCond::K_RegClass, RISCV::FPR32RegClassID},
    {AliasPatternCond::K_Imm, uint32_t(7)},
    {AliasPatternCond::K_Feature, RISCV::FeatureStdExtF},
    // (FDIV_D FPR64:$rd, FPR64:$rs1, FPR64:$rs2, { 1, 1, 1 }) - 193
    {AliasPatternCond::K_RegClass, RISCV::FPR64RegClassID},
    {AliasPatternCond::K_RegClass, RISCV::FPR64RegClassID},
    {AliasPatternCond::K_RegClass, RISCV::FPR64RegClassID},
    {AliasPatternCond::K_Imm, uint32_t(7)},
    {AliasPatternCond::K_Feature, RISCV::FeatureStdExtD},
    // (FDIV_S FPR32:$rd, FPR32:$rs1, FPR32:$rs2, { 1, 1, 1 }) - 198
    {AliasPatternCond::K_RegClass, RISCV::FPR32RegClassID},
    {AliasPatternCond::K_RegClass, RISCV::FPR32RegClassID},
    {AliasPatternCond::K_RegClass, RISCV::FPR32RegClassID},
    {AliasPatternCond::K_Imm, uint32_t(7)},
    {AliasPatternCond::K_Feature, RISCV::FeatureStdExtF},
    // (FENCE 15, 15) - 203
    {AliasPatternCond::K_Imm, uint32_t(15)},
    {AliasPatternCond::K_Imm, uint32_t(15)},
    // (FMADD_D FPR64:$rd, FPR64:$rs1, FPR64:$rs2, FPR64:$rs3, { 1, 1, 1 }) - 205
    {AliasPatternCond::K_RegClass, RISCV::FPR64RegClassID},
    {AliasPatternCond::K_RegClass, RISCV::FPR64RegClassID},
    {AliasPatternCond::K_RegClass, RISCV::FPR64RegClassID},
    {AliasPatternCond::K_RegClass, RISCV::FPR64RegClassID},
    {AliasPatternCond::K_Imm, uint32_t(7)},
    {AliasPatternCond::K_Feature, RISCV::FeatureStdExtD},
    // (FMADD_S FPR32:$rd, FPR32:$rs1, FPR32:$rs2, FPR32:$rs3, { 1, 1, 1 }) - 211
    {AliasPatternCond::K_RegClass, RISCV::FPR32RegClassID},
    {AliasPatternCond::K_RegClass, RISCV::FPR32RegClassID},
    {AliasPatternCond::K_RegClass, RISCV::FPR32RegClassID},
    {AliasPatternCond::K_RegClass, RISCV::FPR32RegClassID},
    {AliasPatternCond::K_Imm, uint32_t(7)},
    {AliasPatternCond::K_Feature, RISCV::FeatureStdExtF},
    // (FMSUB_D FPR64:$rd, FPR64:$rs1, FPR64:$rs2, FPR64:$rs3, { 1, 1, 1 }) - 217
    {AliasPatternCond::K_RegClass, RISCV::FPR64RegClassID},
    {AliasPatternCond::K_RegClass, RISCV::FPR64RegClassID},
    {AliasPatternCond::K_RegClass, RISCV::FPR64RegClassID},
    {AliasPatternCond::K_RegClass, RISCV::FPR64RegClassID},
    {AliasPatternCond::K_Imm, uint32_t(7)},
    {AliasPatternCond::K_Feature, RISCV::FeatureStdExtD},
    // (FMSUB_S FPR32:$rd, FPR32:$rs1, FPR32:$rs2, FPR32:$rs3, { 1, 1, 1 }) - 223
    {AliasPatternCond::K_RegClass, RISCV::FPR32RegClassID},
    {AliasPatternCond::K_RegClass, RISCV::FPR32RegClassID},
    {AliasPatternCond::K_RegClass, RISCV::FPR32RegClassID},
    {AliasPatternCond::K_RegClass, RISCV::FPR32RegClassID},
    {AliasPatternCond::K_Imm, uint32_t(7)},
    {AliasPatternCond::K_Feature, RISCV::FeatureStdExtF},
    // (FMUL_D FPR64:$rd, FPR64:$rs1, FPR64:$rs2, { 1, 1, 1 }) - 229
    {AliasPatternCond::K_RegClass, RISCV::FPR64RegClassID},
    {AliasPatternCond::K_RegClass, RISCV::FPR64RegClassID},
    {AliasPatternCond::K_RegClass, RISCV::FPR64RegClassID},
    {AliasPatternCond::K_Imm, uint32_t(7)},
    {AliasPatternCond::K_Feature, RISCV::FeatureStdExtD},
    // (FMUL_S FPR32:$rd, FPR32:$rs1, FPR32:$rs2, { 1, 1, 1 }) - 234
    {AliasPatternCond::K_RegClass, RISCV::FPR32RegClassID},
    {AliasPatternCond::K_RegClass, RISCV::FPR32RegClassID},
    {AliasPatternCond::K_RegClass, RISCV::FPR32RegClassID},
    {AliasPatternCond::K_Imm, uint32_t(7)},
    {AliasPatternCond::K_Feature, RISCV::FeatureStdExtF},
    // (FNMADD_D FPR64:$rd, FPR64:$rs1, FPR64:$rs2, FPR64:$rs3, { 1, 1, 1 }) - 239
    {AliasPatternCond::K_RegClass, RISCV::FPR64RegClassID},
    {AliasPatternCond::K_RegClass, RISCV::FPR64RegClassID},
    {AliasPatternCond::K_RegClass, RISCV::FPR64RegClassID},
    {AliasPatternCond::K_RegClass, RISCV::FPR64RegClassID},
    {AliasPatternCond::K_Imm, uint32_t(7)},
    {AliasPatternCond::K_Feature, RISCV::FeatureStdExtD},
    // (FNMADD_S FPR32:$rd, FPR32:$rs1, FPR32:$rs2, FPR32:$rs3, { 1, 1, 1 }) - 245
    {AliasPatternCond::K_RegClass, RISCV::FPR32RegClassID},
    {AliasPatternCond::K_RegClass, RISCV::FPR32RegClassID},
    {AliasPatternCond::K_RegClass, RISCV::FPR32RegClassID},
    {AliasPatternCond::K_RegClass, RISCV::FPR32RegClassID},
    {AliasPatternCond::K_Imm, uint32_t(7)},
    {AliasPatternCond::K_Feature, RISCV::FeatureStdExtF},
    // (FNMSUB_D FPR64:$rd, FPR64:$rs1, FPR64:$rs2, FPR64:$rs3, { 1, 1, 1 }) - 251
    {AliasPatternCond::K_RegClass, RISCV::FPR64RegClassID},
    {AliasPatternCond::K_RegClass, RISCV::FPR64RegClassID},
    {AliasPatternCond::K_RegClass, RISCV::FPR64RegClassID},
    {AliasPatternCond::K_RegClass, RISCV::FPR64RegClassID},
    {AliasPatternCond::K_Imm, uint32_t(7)},
    {AliasPatternCond::K_Feature, RISCV::FeatureStdExtD},
    // (FNMSUB_S FPR32:$rd, FPR32:$rs1, FPR32:$rs2, FPR32:$rs3, { 1, 1, 1 }) - 257
    {AliasPatternCond::K_RegClass, RISCV::FPR32RegClassID},
    {AliasPatternCond::K_RegClass, RISCV::FPR32RegClassID},
    {AliasPatternCond::K_RegClass, RISCV::FPR32RegClassID},
    {AliasPatternCond::K_RegClass, RISCV::FPR32RegClassID},
    {AliasPatternCond::K_Imm, uint32_t(7)},
    {AliasPatternCond::K_Feature, RISCV::FeatureStdExtF},
    // (FSGNJN_D FPR64:$rd, FPR64:$rs, FPR64:$rs) - 263
    {AliasPatternCond::K_RegClass, RISCV::FPR64RegClassID},
    {AliasPatternCond::K_RegClass, RISCV::FPR64RegClassID},
    {AliasPatternCond::K_TiedReg, 1},
    {AliasPatternCond::K_Feature, RISCV::FeatureStdExtD},
    // (FSGNJN_S FPR32:$rd, FPR32:$rs, FPR32:$rs) - 267
    {AliasPatternCond::K_RegClass, RISCV::FPR32RegClassID},
    {AliasPatternCond::K_RegClass, RISCV::FPR32RegClassID},
    {AliasPatternCond::K_TiedReg, 1},
    {AliasPatternCond::K_Feature, RISCV::FeatureStdExtF},
    // (FSGNJX_D FPR64:$rd, FPR64:$rs, FPR64:$rs) - 271
    {AliasPatternCond::K_RegClass, RISCV::FPR64RegClassID},
    {AliasPatternCond::K_RegClass, RISCV::FPR64RegClassID},
    {AliasPatternCond::K_TiedReg, 1},
    {AliasPatternCond::K_Feature, RISCV::FeatureStdExtD},
    // (FSGNJX_S FPR32:$rd, FPR32:$rs, FPR32:$rs) - 275
    {AliasPatternCond::K_RegClass, RISCV::FPR32RegClassID},
    {AliasPatternCond::K_RegClass, RISCV::FPR32RegClassID},
    {AliasPatternCond::K_TiedReg, 1},
    {AliasPatternCond::K_Feature, RISCV::FeatureStdExtF},
    // (FSGNJ_D FPR64:$rd, FPR64:$rs, FPR64:$rs) - 279
    {AliasPatternCond::K_RegClass, RISCV::FPR64RegClassID},
    {AliasPatternCond::K_RegClass, RISCV::FPR64RegClassID},
    {AliasPatternCond::K_TiedReg, 1},
    {AliasPatternCond::K_Feature, RISCV::FeatureStdExtD},
    // (FSGNJ_S FPR32:$rd, FPR32:$rs, FPR32:$rs) - 283
    {AliasPatternCond::K_RegClass, RISCV::FPR32RegClassID},
    {AliasPatternCond::K_RegClass, RISCV::FPR32RegClassID},
    {AliasPatternCond::K_TiedReg, 1},
    {AliasPatternCond::K_Feature, RISCV::FeatureStdExtF},
    // (FSQRT_D FPR64:$rd, FPR64:$rs1, { 1, 1, 1 }) - 287
    {AliasPatternCond::K_RegClass, RISCV::FPR64RegClassID},
    {AliasPatternCond::K_RegClass, RISCV::FPR64RegClassID},
    {AliasPatternCond::K_Imm, uint32_t(7)},
    {AliasPatternCond::K_Feature, RISCV::FeatureStdExtD},
    // (FSQRT_S FPR32:$rd, FPR32:$rs1, { 1, 1, 1 }) - 291
    {AliasPatternCond::K_RegClass, RISCV::FPR32RegClassID},
    {AliasPatternCond::K_RegClass, RISCV::FPR32RegClassID},
    {AliasPatternCond::K_Imm, uint32_t(7)},
    {AliasPatternCond::K_Feature, RISCV::FeatureStdExtF},
    // (FSUB_D FPR64:$rd, FPR64:$rs1, FPR64:$rs2, { 1, 1, 1 }) - 295
    {AliasPatternCond::K_RegClass, RISCV::FPR64RegClassID},
    {AliasPatternCond::K_RegClass, RISCV::FPR64RegClassID},
    {AliasPatternCond::K_RegClass, RISCV::FPR64RegClassID},
    {AliasPatternCond::K_Imm, uint32_t(7)},
    {AliasPatternCond::K_Feature, RISCV::FeatureStdExtD},
    // (FSUB_S FPR32:$rd, FPR32:$rs1, FPR32:$rs2, { 1, 1, 1 }) - 300
    {AliasPatternCond::K_RegClass, RISCV::FPR32RegClassID},
    {AliasPatternCond::K_RegClass, RISCV::FPR32RegClassID},
    {AliasPatternCond::K_RegClass, RISCV::FPR32RegClassID},
    {AliasPatternCond::K_Imm, uint32_t(7)},
    {AliasPatternCond::K_Feature, RISCV::FeatureStdExtF},
    // (JAL X0, simm21_lsb0_jal:$offset) - 305
    {AliasPatternCond::K_Reg, RISCV::X0},
    {AliasPatternCond::K_Custom, 2},
    // (JAL X1, simm21_lsb0_jal:$offset) - 307
    {AliasPatternCond::K_Reg, RISCV::X1},
    {AliasPatternCond::K_Custom, 2},
    // (JALR X0, X1, 0) - 309
    {AliasPatternCond::K_Reg, RISCV::X0},
    {AliasPatternCond::K_Reg, RISCV::X1},
    {AliasPatternCond::K_Imm, uint32_t(0)},
    // (JALR X0, GPR:$rs, 0) - 312
    {AliasPatternCond::K_Reg, RISCV::X0},
    {AliasPatternCond::K_RegClass, RISCV::GPRRegClassID},
    {AliasPatternCond::K_Imm, uint32_t(0)},
    // (JALR X1, GPR:$rs, 0) - 315
    {AliasPatternCond::K_Reg, RISCV::X1},
    {AliasPatternCond::K_RegClass, RISCV::GPRRegClassID},
    {AliasPatternCond::K_Imm, uint32_t(0)},
    // (JALR GPR:$rd, GPR:$rs, 0) - 318
    {AliasPatternCond::K_RegClass, RISCV::GPRRegClassID},
    {AliasPatternCond::K_RegClass, RISCV::GPRRegClassID},
    {AliasPatternCond::K_Imm, uint32_t(0)},
    // (JALR X0, GPR:$rs, simm12:$offset) - 321
    {AliasPatternCond::K_Reg, RISCV::X0},
    {AliasPatternCond::K_RegClass, RISCV::GPRRegClassID},
    {AliasPatternCond::K_Custom, 3},
    // (JALR X1, GPR:$rs, simm12:$offset) - 324
    {AliasPatternCond::K_Reg, RISCV::X1},
    {AliasPatternCond::K_RegClass, RISCV::GPRRegClassID},
    {AliasPatternCond::K_Custom, 3},
    // (SFENCE_VMA X0, X0) - 327
    {AliasPatternCond::K_Reg, RISCV::X0},
    {AliasPatternCond::K_Reg, RISCV::X0},
    // (SFENCE_VMA GPR:$rs, X0) - 329
    {AliasPatternCond::K_RegClass, RISCV::GPRRegClassID},
    {AliasPatternCond::K_Reg, RISCV::X0},
    // (SLT GPR:$rd, GPR:$rs, X0) - 331
    {AliasPatternCond::K_RegClass, RISCV::GPRRegClassID},
    {AliasPatternCond::K_RegClass, RISCV::GPRRegClassID},
    {AliasPatternCond::K_Reg, RISCV::X0},
    // (SLT GPR:$rd, X0, GPR:$rs) - 334
    {AliasPatternCond::K_RegClass, RISCV::GPRRegClassID},
    {AliasPatternCond::K_Reg, RISCV::X0},
    {AliasPatternCond::K_RegClass, RISCV::GPRRegClassID},
    // (SLTIU GPR:$rd, GPR:$rs, 1) - 337
    {AliasPatternCond::K_RegClass, RISCV::GPRRegClassID},
    {AliasPatternCond::K_RegClass, RISCV::GPRRegClassID},
    {AliasPatternCond::K_Imm, uint32_t(1)},
    // (SLTU GPR:$rd, X0, GPR:$rs) - 340
    {AliasPatternCond::K_RegClass, RISCV::GPRRegClassID},
    {AliasPatternCond::K_Reg, RISCV::X0},
    {AliasPatternCond::K_RegClass, RISCV::GPRRegClassID},
    // (SUB GPR:$rd, X0, GPR:$rs) - 343
    {AliasPatternCond::K_RegClass, RISCV::GPRRegClassID},
    {AliasPatternCond::K_Reg, RISCV::X0},
    {AliasPatternCond::K_RegClass, RISCV::GPRRegClassID},
    // (SUBW GPR:$rd, X0, GPR:$rs) - 346
    {AliasPatternCond::K_RegClass, RISCV::GPRRegClassID},
    {AliasPatternCond::K_Reg, RISCV::X0},
    {AliasPatternCond::K_RegClass, RISCV::GPRRegClassID},
    {AliasPatternCond::K_Feature, RISCV::Feature64Bit},
    // (XORI GPR:$rd, GPR:$rs, -1) - 350
    {AliasPatternCond::K_RegClass, RISCV::GPRRegClassID},
    {AliasPatternCond::K_RegClass, RISCV::GPRRegClassID},
    {AliasPatternCond::K_Imm, uint32_t(-1)},
  };

  static const char AsmStrings[] =
    /* 0 */ "nop\0"
    /* 4 */ "mv $\x01, $\x02\0"
    /* 14 */ "sext.w $\x01, $\x02\0"
    /* 28 */ "beqz $\x01, $\x03\0"
    /* 40 */ "blez $\x02, $\x03\0"
    /* 52 */ "bgez $\x01, $\x03\0"
    /* 64 */ "bltz $\x01, $\x03\0"
    /* 76 */ "bgtz $\x02, $\x03\0"
    /* 88 */ "bnez $\x01, $\x03\0"
    /* 100 */ "csrc $\xFF\x02\x01, $\x03\0"
    /* 114 */ "csrci $\xFF\x02\x01, $\x03\0"
    /* 129 */ "frcsr $\x01\0"
    /* 138 */ "frrm $\x01\0"
    /* 146 */ "frflags $\x01\0"
    /* 157 */ "rdinstret $\x01\0"
    /* 170 */ "rdcycle $\x01\0"
    /* 181 */ "rdtime $\x01\0"
    /* 191 */ "rdinstreth $\x01\0"
    /* 205 */ "rdcycleh $\x01\0"
    /* 217 */ "rdtimeh $\x01\0"
    /* 228 */ "csrr $\x01, $\xFF\x02\x01\0"
    /* 242 */ "csrs $\xFF\x02\x01, $\x03\0"
    /* 256 */ "csrsi $\xFF\x02\x01, $\x03\0"
    /* 271 */ "fscsr $\x03\0"
    /* 280 */ "fsrm $\x03\0"
    /* 288 */ "fsflags $\x03\0"
    /* 299 */ "csrw $\xFF\x02\x01, $\x03\0"
    /* 313 */ "fscsr $\x01, $\x03\0"
    /* 326 */ "fsrm $\x01, $\x03\0"
    /* 338 */ "fsflags $\x01, $\x03\0"
    /* 353 */ "fsrmi $\x03\0"
    /* 362 */ "fsflagsi $\x03\0"
    /* 374 */ "csrwi $\xFF\x02\x01, $\x03\0"
    /* 389 */ "fsrmi $\x01, $\x03\0"
    /* 402 */ "fsflagsi $\x01, $\x03\0"
    /* 418 */ "fadd.d $\x01, $\x02, $\x03\0"
    /* 436 */ "fadd.s $\x01, $\x02, $\x03\0"
    /* 454 */ "fcvt.d.l $\x01, $\x02\0"
    /* 470 */ "fcvt.d.lu $\x01, $\x02\0"
    /* 487 */ "fcvt.lu.d $\x01, $\x02\0"
    /* 504 */ "fcvt.lu.s $\x01, $\x02\0"
    /* 521 */ "fcvt.l.d $\x01, $\x02\0"
    /* 537 */ "fcvt.l.s $\x01, $\x02\0"
    /* 553 */ "fcvt.s.d $\x01, $\x02\0"
    /* 569 */ "fcvt.s.l $\x01, $\x02\0"
    /* 585 */ "fcvt.s.lu $\x01, $\x02\0"
    /* 602 */ "fcvt.s.w $\x01, $\x02\0"
    /* 618 */ "fcvt.s.wu $\x01, $\x02\0"
    /* 635 */ "fcvt.wu.d $\x01, $\x02\0"
    /* 652 */ "fcvt.wu.s $\x01, $\x02\0"
    /* 669 */ "fcvt.w.d $\x01, $\x02\0"
    /* 685 */ "fcvt.w.s $\x01, $\x02\0"
    /* 701 */ "fdiv.d $\x01, $\x02, $\x03\0"
    /* 719 */ "fdiv.s $\x01, $\x02, $\x03\0"
    /* 737 */ "fence\0"
    /* 743 */ "fmadd.d $\x01, $\x02, $\x03, $\x04\0"
    /* 766 */ "fmadd.s $\x01, $\x02, $\x03, $\x04\0"
    /* 789 */ "fmsub.d $\x01, $\x02, $\x03, $\x04\0"
    /* 812 */ "fmsub.s $\x01, $\x02, $\x03, $\x04\0"
    /* 835 */ "fmul.d $\x01, $\x02, $\x03\0"
    /* 853 */ "fmul.s $\x01, $\x02, $\x03\0"
    /* 871 */ "fnmadd.d $\x01, $\x02, $\x03, $\x04\0"
    /* 895 */ "fnmadd.s $\x01, $\x02, $\x03, $\x04\0"
    /* 919 */ "fnmsub.d $\x01, $\x02, $\x03, $\x04\0"
    /* 943 */ "fnmsub.s $\x01, $\x02, $\x03, $\x04\0"
    /* 967 */ "fneg.d $\x01, $\x02\0"
    /* 981 */ "fneg.s $\x01, $\x02\0"
    /* 995 */ "fabs.d $\x01, $\x02\0"
    /* 1009 */ "fabs.s $\x01, $\x02\0"
    /* 1023 */ "fmv.d $\x01, $\x02\0"
    /* 1036 */ "fmv.s $\x01, $\x02\0"
    /* 1049 */ "fsqrt.d $\x01, $\x02\0"
    /* 1064 */ "fsqrt.s $\x01, $\x02\0"
    /* 1079 */ "fsub.d $\x01, $\x02, $\x03\0"
    /* 1097 */ "fsub.s $\x01, $\x02, $\x03\0"
    /* 1115 */ "j $\x02\0"
    /* 1120 */ "jal $\x02\0"
    /* 1127 */ "ret\0"
    /* 1131 */ "jr $\x02\0"
    /* 1137 */ "jalr $\x02\0"
    /* 1145 */ "jalr $\x01, $\x02\0"
    /* 1157 */ "jr $\x03($\x02)\0"
    /* 1167 */ "jalr $\x03($\x02)\0"
    /* 1179 */ "sfence.vma\0"
    /* 1190 */ "sfence.vma $\x01\0"
    /* 1204 */ "sltz $\x01, $\x02\0"
    /* 1216 */ "sgtz $\x01, $\x03\0"
    /* 1228 */ "seqz $\x01, $\x02\0"
    /* 1240 */ "snez $\x01, $\x03\0"
    /* 1252 */ "neg $\x01, $\x03\0"
    /* 1263 */ "negw $\x01, $\x03\0"
    /* 1275 */ "not $\x01, $\x02\0"
  ;

#ifndef NDEBUG
  static struct SortCheck {
    SortCheck(ArrayRef<PatternsForOpcode> OpToPatterns) {
      assert(std::is_sorted(
                 OpToPatterns.begin(), OpToPatterns.end(),
                 [](const PatternsForOpcode &L, const PatternsForOpcode &R) {
                   return L.Opcode < R.Opcode;
                 }) &&
             "tablegen failed to sort opcode patterns");
    }
  } sortCheckVar(OpToPatterns);
#endif

  AliasMatchingData M {
    makeArrayRef(OpToPatterns),
    makeArrayRef(Patterns),
    makeArrayRef(Conds),
    StringRef(AsmStrings, array_lengthof(AsmStrings)),
    &RISCVInstPrinterValidateMCOperand,
  };
  const char *AsmString = matchAliasPatterns(MI, &STI, M);
  if (!AsmString) return false;

  unsigned I = 0;
  while (AsmString[I] != ' ' && AsmString[I] != '\t' &&
         AsmString[I] != '$' && AsmString[I] != '\0')
    ++I;
  OS << '\t' << StringRef(AsmString, I);
  if (AsmString[I] != '\0') {
    if (AsmString[I] == ' ' || AsmString[I] == '\t') {
      OS << '\t';
      ++I;
    }
    do {
      if (AsmString[I] == '$') {
        ++I;
        if (AsmString[I] == (char)0xff) {
          ++I;
          int OpIdx = AsmString[I++] - 1;
          int PrintMethodIdx = AsmString[I++] - 1;
          printCustomAliasOperand(MI, OpIdx, PrintMethodIdx, STI, OS);
        } else
          printOperand(MI, unsigned(AsmString[I++]) - 1, STI, OS);
      } else {
        OS << AsmString[I++];
      }
    } while (AsmString[I] != '\0');
  }

  return true;
}

void RISCVInstPrinter::printCustomAliasOperand(
         const MCInst *MI, unsigned OpIdx,
         unsigned PrintMethodIdx,
         const MCSubtargetInfo &STI,
         raw_ostream &OS) {
  switch (PrintMethodIdx) {
  default:
    llvm_unreachable("Unknown PrintMethod kind");
    break;
  case 0:
    printCSRSystemRegister(MI, OpIdx, STI, OS);
    break;
  }
}

static bool RISCVInstPrinterValidateMCOperand(const MCOperand &MCOp,
                  const MCSubtargetInfo &STI,
                  unsigned PredicateIndex) {
  switch (PredicateIndex) {
  default:
    llvm_unreachable("Unknown MCOperandPredicate kind");
    break;
  case 1: {

    int64_t Imm;
    if (MCOp.evaluateAsConstantImm(Imm))
      return isShiftedInt<12, 1>(Imm);
    return MCOp.isBareSymbolRef();
  
    }
  case 2: {

    int64_t Imm;
    if (MCOp.evaluateAsConstantImm(Imm))
      return isShiftedInt<20, 1>(Imm);
    return MCOp.isBareSymbolRef();
  
    }
  case 3: {

    int64_t Imm;
    if (MCOp.evaluateAsConstantImm(Imm))
      return isInt<12>(Imm);
    return MCOp.isBareSymbolRef();
  
    }
  }
}

#endif // PRINT_ALIAS_INSTR
